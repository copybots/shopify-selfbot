import discord
from discord.ext import commands
from discord.ext.commands import Bot
import asyncio
import time
import json
import os

#----------------------------------------------------------------------------------------------------
# These variables must be filled out in order for the bot to work.
#
# selfbot: If you want a selfbot, just leave it as True, but if you ever want to use it on a normal bot, set it to False.
# token : The account token on which the bot will be running.
# commands_server_id : The bot will only respond to commands in the server with this server ID.
#                      If you leave it blank, the bot will respond to commands in every server.
# commands_channel_id : The bot will only respond to commands in the channel with this channel ID.
#                       If you leave it blank, the bot will respond to commands in every channel (in the server
#                       with the server ID that you put).

selfbot = True
token = str(os.environ.get("BOT_TOKEN"))
commands_server_id = str(os.environ.get("COMMANDS_SERVER_ID"))
commands_channel_id = str(os.environ.get("COMMANDS_CHANNEL_ID"))

#----------------------------------------------------------------------------------------------------
# These variables can be edited in the code, but are designed to be changed through discord commands.
# To see more commands type !help in discord.
#
# copy_server_ids : The servers to copy from.
# copy_channel_ids : The channels inside those servers to copy from.
# post_server_ids : The servers to post those messages to.
# post_channel_ids : The channels inside those servers to post those messages to.

copy_server_ids = []
copy_channel_ids = []
post_server_ids = []
post_channel_ids = []

memberlist = []
wordlist = []
case_sensitive_wordlist = True

#----------------------------------------------------------------------------------------------------

Client = discord.Client()
bot = commands.Bot(command_prefix="!")

edit_msg_list = []
edit_msg_list_length = 10

filename = "botinfo.cfg"
filedata = {"setup_info": {"copy_server_ids": ["430997261066174464"], "copy_channel_ids": ["445140446176477184"], "post_server_ids": ["456445523960791042"], "post_channel_ids": ["461494200979030016"]}, "memberlist": ["245365926080413696", "402148688450813962", "454205578537861121", "394671601003659265", "378048483619504128", "412580161934983168", "400008598257664000", "423284265183346691", "407360197259034654", "420448815447932931", "108300847330365440", "417545698091859968", "406158676945010690", "390337471948521494", "440315527953383431", "439190146919694357", "251814672041377792", "452628093186867201", "255813998170210305", "396678304331071498", "431965272392466432", "431255369780690946", "193789426135072768", "431619097336348684", "428736921729105930", "427866565208440832", "395337529605226497", "404001840980688898", "443613989323276289", "337164223043862529", "378506808043634689", "430833496915836929", "277905782937223169", "194993436410118144", "422737499610415115", "391460735936626688", "363892169251225600", "375767957797601280", "138754250367827969", "147208559925395456", "409828662930571268", "427576907190501387", "402985005493649408", "420733883374632975", "433001403812675584", "129077774789902336", "172864769248854016", "384552303262171156", "380516426441687041", "218376576339804160", "200278421371092995", "425876041567961090", "182984127413354496", "440384442645610508", "144690259240812544", "438918557464657952", "440251289004146689", "411364467327107091", "440506897125212180", "384558826902257694", "305499081491611660", "160768980812824577", "168490814769463296", "421098536768372748", "439846801198284810", "316261979830484992", "209851731775979522", "237986357937438721", "444202961145561098", "190948887006150665", "436921682083708939", "416429038765342735", "426906738118230027", "319891058190319616", "428718972507258890", "422448554787733504", "424804123888713748", "366058837318434817", "404684371908624384", "169960882749702144", "440691528197865474", "391444224677249028", "156271700642627593", "440375287167975425", "421349394819055616", "166310772199129088", "234429544302510081", "302983142204112896", "438920689198563329", "418945150132420608", "210537692499410946", "393862295463133196", "434341293678657536", "258413443420389376", "381291144467972096", "431902257886396426", "391715796776124427", "376761573407981579", "399081099499929610", "299748193695039490", "391552248393498626", "441653386572464138", "137754666195746816", "244976728433229826", "133214423308304384", "419391674872233996", "202980405387722761", "326167816476557312", "422877409029652480", "307252786100436997", "364846587719057410", "336615449879904267", "414662766423572490", "332941173343911937", "417331835614396416", "412038749510434839", "437185907993477120", "343514035049857024", "206556531007815681", "320912530199412738", "454751706916454401", "310814019944579083", "418573096522481664", "429764540847357953", "434618398886985728", "387429782385721346", "439619329990983694", "372821798531629057", "199059045594693632", "369200890348961802", "437051065691668502", "389140013880705024", "358796851409059841", "279888547295526912", "316597233791533059", "371387784524726272", "415409353051471873", "313492462691942400", "416484015508291584", "378397461644836866", "427915105464745994", "318197312633438210", "428277952891846656", "161613077102460930", "434892902385057802", "421491832673927169", "235966404896096266", "435161701105664001", "269482557219930112", "143190050560016386", "420447729169465344", "421088993464025108", "338162008723816450", "375531152892624896", "381867435680333825", "433290778362642432", "433345859661463562", "431878074855063585", "427557212399992843", "440026540571361291", "350064476029976577", "383104108695126016", "329796830885969921", "440229689227739156", "389684472871780353", "305725482824105996", "351133596662104066", "400096162213789696", "158674058689380362", "330921007261024256", "426146349600473110", "405193390209368075", "404437757809917952", "190518691518087169", "411381819599224832", "435283578268549131", "370879781228511232", "385208580464181248", "254058857058271235", "318342206568136714", "446128985391366144", "142496785774936065", "431361793517158401", "278729923307372546", "389896494091730956", "440305395874004992", "389608400545251349", "433345231035957260", "285950162243813377", "353062182172360716", "365270539209539586", "412630888417984527", "255043006602805249", "434129040832593920", "374152636066299904", "327059806475255809", "254904437200388096", "427837375209537536", "306836078302855169", "277811450947567616", "420496664969871363", "348662732133892096", "431266076614066177", "151030824706375681", "443424388168286258", "389865275090010123", "440028252422144011", "270459033939345408", "277724422062735361", "423936254275747850", "209215855454584833", "400805765264310273", "332739535635087371", "205802957524959232", "422016537264652289", "394365006419984384", "354745282711388170", "427874267820982272", "285980864326926337", "178137352764391424", "416309909882142720", "338680107398987776", "152294801029595136", "203262972599074827", "229408848488693760", "319543354885144576", "438547662199848972", "219318409911861249", "366547411981697024", "440334625529659393", "255158713764020225", "380798550843588608", "420732516962402304", "421886601409462272", "437068682322247710", "156946321654153216", "346135242245144576", "279757853613490186", "262242489946210304", "379807312979689512", "208214545364156418", "225809955607805953", "328144513153630218", "419268567305945099", "336332532205223936", "424239629722451968", "392589543171424266", "440319480418140162", "409902788735139840", "394348914658246657", "233991113369845762", "272442782633951235", "433201864084029451", "309730303201640470", "381386515063767042", "423360323546906634", "312465951918653450", "420774512603168778", "430925773302530048", "176316141734592513", "417860797570744321", "328025804485427200", "198601107595984897", "274365748581761024", "440380868947607552", "421906228621344769", "450088710755581962", "440356937415262210", "416749551127363584", "236714977572945921", "419721811022839808", "225244125316775937", "314295200921157634", "446450921438838804", "235088799074484224", "203933237427437568", "243503589501304833", "432957297111597068", "122317243857108992", "402971083244044289", "327539424361709568", "259471230120361985", "222852660133363712", "433293469717626880", "443435775112249345", "431153727303581696", "222883051582128128", "161692791406198784", "432587383318511637", "403367586773073922", "278721388804702208", "227891808103825408", "445341819363000331", "439844521501523969", "283415812113694720", "242332572372172802", "165926330154614785", "292156626960646144", "392467424286343169", "422634161610686475", "439757582001766401", "216392336811229184", "119176442314489857", "436548477200236544", "414604827109097485", "338350600163033100", "271342069572829184", "379860683816304640", "393106989841907714", "103274690801340416", "294317687314841610", "419666920091025420", "436042489749831680", "456191042618916874", "250804748893159435", "317448511262162947", "452495569055645698", "434540033882587146", "422220127484772352", "388124784677879829", "314931318054191106", "374995940618010624", "432691030765076500", "315241498306412554", "333722260739194890", "255117299248267266", "440326120513208332", "416149304059756544", "142787421208051713", "454917755477426186", "446410744590893067", "404471037107896331", "397500143663841281", "458715985084547073", "422731149413187594", "388052011880284170", "140731844604723200", "386364344302305281", "443129095232946182", "404308604808593418", "382405701852725248", "390588232267595776", "283827794725699595", "440680041060237313", "249599869944201227", "251409087328288778", "383221430659317760", "457345750586884107", "424015124962213889", "223164453271764992", "448963926223224833", "367316934909493248", "429045198647984129", "440697242316308480", "430446085413011467", "453641138830835722", "154623390337073153", "269755273646702592", "126101900947881995", "433294744123080706", "426291953416667136", "240469208201166848", "460413186815033365", "437646044973498383", "188777520408166401", "214496829335797761", "440322069666856960", "425140509141499905", "382311346018189313", "330600790920265732", "438917999160721408", "236905163900715009", "433001150166466562", "327524005688901643", "189537837928939520", "284905171073368065", "393249601475313665", "138398509572292608", "379320041448931328", "441605892459200532", "349756556356878339", "267474407235125248", "427651374759673859", "244845363142328320", "166301338618036224", "408814005696593942", "443810224999235595", "416353378352758794", "288012649046867989", "331791903089623042", "409076986661830657", "270788519985807360", "342025670454542357", "325096271331459073", "440276062820237323", "440310005888188416", "412049334259941377", "418271409450516483", "306613471745933322", "440287943169671205", "337605997994704896", "177582687446499328", "439082076369846272", "411456738559131668", "350446123195957248", "190602038571171842", "380589049343115274", "442139859088441355", "285411723425349632", "314465520025993217", "440268894272356357", "190610827143938048", "203588487323058176", "241296092644376576", "306463232984481794", "145429967432318976", "140510873373376512", "206104096413843456", "330615182390722570", "279846849496743938", "277923383813996555", "425107923694518273", "408430305679114241", "374764495714648066", "432470848352288768", "440168100852400149", "223398953549299712", "442474121436332043", "419512408307007489", "433290584879267841", "393523541859106816", "429137591976198164", "218061587544670208", "458376758941581323", "420798161913774091", "385225917896720395", "144561129425731585", "326708820493467648", "441653787749384192", "432652919125311488", "263389292397723658", "292766629660459008", "270162057444196352", "417483645494886411", "428194035497435137", "298303063033249794", "330523392153223171", "446733848881922068", "321392042154655754", "440388086250078218", "311241949782999051", "387335559871201281", "249129797635145728", "381754263858184193", "435945323588878349", "409891432417984558", "409875355558739969", "393028009503752202", "426582473980510211", "236718533545951251", "420391861983772672", "348274393517916161", "330540707968319488", "300710418694012939", "384034990029012993", "434463715622912001", "437280409030754304", "254669853770645514", "339026609103175682", "424219067734556692", "422260687260221440", "137368282008256512", "242149958998818817", "210208888929255424", "385476772260610049", "409431921135976450", "440371640895799296", "438546745824378892", "418982860062457856", "295003881510010880", "435243120427532288", "433289891841966091", "334229378164588544", "415690467041083393", "378698272606257156", "399891445194031105", "432919239939325952", "392817640911011850", "200054597069438977", "446476659290406952", "415695210006315028", "426630531891986434", "350832803463823361", "430285015226515460", "378000016712925184", "287703841606991882", "390287729843372035", "389771165104734208", "448397365921972224", "374272120722554881", "134487293246439425", "432425884637462540", "213587536013033472", "295253542141296640", "444609781538226176", "418609059151872010", "438931472783507456", "314598642247925770", "174156192405258240", "440684275151536128", "321342960132161546", "425076206652882957", "440336803631857665", "349445847999578113", "397450192724688898", "167880787641892865", "391418069051768834", "202298804500824064", "439530724505157642", "326915069868769281", "355122721186906114", "381725497371000832", "388141442247163906", "293457255280672768", "434023285919973376", "283055375257960458", "440393515386535936", "314937370250182656", "430925131838259203", "359039399239090176", "453568672686931968", "418595860792999936", "234436745649717248", "414881404636233739", "441918824820899841", "291217794748383242", "440680881125064715", "378075829584003073", "298563901468049420", "246517963962843137", "382668886182461450", "131906648775065609", "440709021503062016", "430199286190440448", "459465256964587543", "233771445463810048", "409851368120254475", "249714204926279681", "372903803797766145", "391771319815110660", "401077091220586507", "330993839756279809", "331845913188368395", "250088691312099328", "324901033656451073", "158082452437336064", "396181340594372611", "459137598670110720", "194162482745442305", "381122038896656384", "95694409445670912", "397409631044894722", "208654529263173632", "276556800835452928", "376757544330330122", "236844393779167232", "453297346118418442", "290164574580113409", "248195819725914112", "275737148810854400", "254486857893675018", "419296212823441418", "157253391402270721", "438545584148709377", "331242902317563906", "400143464739635203", "395321337301827595", "448709704189739008", "449350518184214540", "443123514606616586", "211852131307618316", "388962690913140746", "397597041259446293", "385267950120337418", "427610541020807169", "432800307064602625", "155149108183695360", "455385425117315072", "338870161912233994", "377591567092809729", "451222935643095040", "421084506636943360", "360428182446276609", "438548175679389696", "404371354901544961", "419513355590434836", "402366951894155264", "272263808758710272", "209956136244346880", "434027333154766848", "456172299012538370", "421348069704073227", "383023755896815627", "96361657034366976", "211059455108841473", "109076543266893824", "279434719102500866", "396095335300333568", "300717740661014528", "410967745757315075", "155914049228505089", "438396238551842818", "181103225166888962", "428425636416192522", "403351859177324545", "453582391915577374", "250052501095579648", "367041595662401573", "385182419520847874", "118547882008772610", "399048192529924108", "431243780956487701", "428038072240963584", "208945686081830912", "155342917299470336", "412411577720111106", "411272683293245440", "449941666598617108", "264836333510459412", "376506778302676996", "404792410523041792", "438547963732557826", "440033985075216395", "433117870386577408", "317144246047997953", "88088651631689728", "428930019512025089", "158455428613668873", "342107176682389515", "440020976097296385", "439261895942471689", "454453850724630537", "440389330821709825", "328506325233565699", "390310460580429824", "142727765341241344", "176551748649877511", "440007907120250880", "391365168669392896", "384373079515594753", "257718062382317578", "403700682760257536", "230548221221535745", "435180709846712330", "423946692941840385", "149508302256996352", "278726118331252736", "121673466599440384", "324409553129308172", "397846128365928448", "381221663733317634", "412260265627877376", "440680325996216324", "397931866318962710", "444799622578438147", "230823481774702593", "459691444454686730", "326952230949355521", "438497693585768459", "303591087878963201", "399815367737737216", "390530296392450048", "394401161836363786", "358326208489848834", "440263996579381248", "391367283697647628", "444292826516291604", "166388022634348544", "438789151215714307", "426864179107069952", "278770372680220672", "386267968033783808", "440257684688732183", "331682643886342146", "337381328234348558", "381368263021559818", "318144381754540032", "443076284227125249", "431523063486611456", "440390047552897034", "425848790227091458", "380873612984320001", "266652522289168394", "409581252199448577", "386917277980950529", "204334784271482880", "213435091009929226", "407325293418774558", "176479176478425089", "163757680341680128", "209817921592098826", "444896198126600217", "434015477250129920", "435443985050370058", "337619294084923393", "381726787660677130", "436633015720869908", "383666822433734656", "263752281932038146", "438112428413288458", "323668135427309568", "189854260274397184", "442703146637066242", "95668861512196096", "96416687607267328", "427965309740384287", "242026632276213770", "438826831358197760", "419316880290086914", "407727360683671572", "378733926681804811", "431259885154336801", "411942239468650496", "392850985615097856", "383339918828503050", "325439595917606913", "324431134794711041", "313353811752255488", "200826655101419520", "364823070306729994", "367043481916407808", "212065583150137344", "437482796311773193", "440691689380904970", "413881793486389258", "304835898430849025", "440688031830245387", "347840582862897152", "360239800013553665", "344418359795908609", "266374661636358145", "415164509791977472", "340634846583848980", "254762105184583681", "91680672858505216", "328392463993667587", "335679702738141185", "141759672414765056", "309415653859655680", "448535341482377217", "437106960551378944", "440284517190598666", "403693076314325006", "422396627521765379", "291358568479719424", "405918543184527361", "429264008952938496", "438547321710444545", "111037482178523136", "433513079414980608", "276564439204102144", "427707009559691275", "440024016619831306", "356974146456125471", "406620005489311755", "415756795462811648", "434899877483511828", "400449773762510848", "207233463387029504", "263076211628965888", "427550909623566346", "286960286571692033", "427936844328730624", "415308510969200640", "440820408934203393", "378042091693146122", "439670763222728714", "410283125130788875", "429866260151664641", "401397188649025537", "281450846686937088", "422487274270359574", "314656919455268864", "425735924249526282", "429751630418935819", "379747767427268609", "420387959674765335", "397745902749483009", "378004625313234944", "380965538060435458", "345014842761019393", "334505083113046026", "386024262391300107", "436337142491512833", "383120313401212943", "392100341958836242", "440386376190656524", "420668999525990401", "252571337791504386", "139879815187660800", "434097482142580737", "280877783226384387", "323517285518147585", "279503885977255936", "452905791872040975", "390595725169262594", "417158313055223833", "418251771538964492", "412413618970165248", "436671564503580672", "432678144994967552", "406877172272332801", "432999653420695563", "436352993261256704", "234742956475547648", "461264141902938121", "215641733474549761", "326280220795469824", "378341074197807104", "389628909609549838", "429309421970128905", "381436913694932992", "435692004442243072", "307469264762437634", "133055449346998274", "438919100652322817", "440392167282966528", "328545290950934528", "280139616391135243", "389610673715412992", "236872572250226690", "392452017731141654", "439849257650880512", "428015927565484032", "412261870385496085", "265999053647511561", "419483946204528641", "183346883073146882", "416729342341677057", "160816570262618112", "279846846350884866", "440338983675887628", "226136428524863489", "208301284460068865", "177997909738913792", "391227279193407489", "432393019581267968", "155538479151841280", "141526604693241857", "378561998239170561", "434250085916999680", "227492558069039114", "430554985110044702", "443584532638203907", "324762223102656532", "386170323634225154", "413187565647298564", "137692238816870401", "430040588021137409", "229158423768334338", "235999929758121984", "444676842914316288", "392424158136369164", "429488446160109578", "338215027947601940", "421920305146101775", "371125018400391170", "331837901459554304", "270331920368271360", "362677189734301706", "316805649147101184", "299657655088185346", "327509289226731524", "415226298848378890", "390616190990548992", "444108974682537984", "427882337066549260", "440284346679689216", "433712212121616388", "388108269589233665", "319499111281721344", "411415642214760451", "409447530330456064", "433001830901874688", "430221792712327168", "276687800911265795", "385654467560734720", "280763691119542273", "429112236955402240", "444202707616661514", "433473945484918795", "419312630440656907", "459202565930745863", "379470364650242051", "432683218613829643", "327936936461336576", "209477358334246924", "386237948078850049", "395091834101301250", "188188069554421760", "333340503896489995", "320805504118947840", "342498560979501067", "329802151813709825", "420372465672519680", "379779500059262987", "436262934570598441", "283555222469476353", "440344649245261827", "443126300761129000", "386968626143690752", "219967057255464961", "340639071439290379", "439190613087485952", "440369689353519114", "335812626233688064", "415041638088572929", "197529647385149441", "297658701832126464", "440027842223538176", "440526796837093397", "426227568237346827", "422247876639326209", "428673260750766080", "186211926102114305", "228875315865190401", "438827743208275970", "169193483465261056", "140350472123842560", "330025561256886275", "425281202946048010", "417521169000955905", "435252928232685580", "424303016259354651", "444509794611757086", "444908735954157570", "414659255023435777", "124412735525093376", "379701046773153792", "298315571932430337", "211549903808233474", "441194091577999360", "312128524813336587", "370255927258906624", "434608174000111617", "247305211025031169", "331681476871454721", "357619915378917378", "436624163122184193", "181465041063641088", "401557176180539394", "413466732385271819", "424605956077256705", "421302157862633473", "447225251194208268", "385135869683695616", "367819396338548747", "236715803511095296", "412387449206079489", "447257178156564481", "440273901352779797", "437622362758840320", "417815759947956234", "132542948108795904", "291486194557255680", "245603234738208768", "347075836010168321", "240028526349123586", "395854281158295552", "408717958794444803", "420703122600493057", "227468356184309760", "380863553663533076", "339863026595266561", "408076428349931529", "225570223938338816", "417818217986129920", "439210388920336390", "427979894316597258", "435958150550781954", "269667478567649283", "137780990549426176", "339987626545250304", "419198763505287170", "151552572132425729", "218974436915675136", "429830292665139222", "260585710065549312", "419260267231313921", "435491855149563914", "445009777647550484", "296760103099432960", "158377473875247104", "393101192559067136", "137031453786636289", "388607958361178112", "438721410009923584", "433344271924461590", "312636908314558465", "250437395600769025", "385848637810409474", "322929026228289536", "439844935718535188", "346016551843004416", "300785118337826818", "434023482167132171", "444707228583329792", "374222512437067776", "216728677252071425", "181468357499944960", "152253607771635712", "440679429795086351", "440680635334524930", "440351157219491840", "404876834740764703", "402214862026964992", "393935715777642508", "249043519174344704", "425889636934615040", "398839066042302465", "396858225057595404", "433581241803997195", "414108482405662720", "229199998129012736", "439080343853858817", "392412336616374292", "344406301616373762", "282274406267355136", "391012546175434753", "395059011726344192", "440682708507557899", "217677608299528192", "177153486247559168", "443123445467840522", "214465121081098241", "376612396887834625", "310093033112600577", "440690893859717130", "419383103593906196", "367793822798708736", "429121938804310027", "420940630592716800", "450720230117736448", "333359094062645260", "440392370778013698", "96502021389058048", "381672168481751040", "411732108177047553", "431622323833929730", "318900658550079488", "280202544356130820", "422044343159750656", "434398528173768705", "206510171625750529", "327942577930240001", "383260051256639499", "279846720932937730", "305355868768043009", "184815398011535371", "350810028325994518", "362762747714207744", "379728749429653506", "259553714392662016", "422589142870786049", "426412518651461632", "427867344417718273", "447551975194886145", "427216093401317376", "208465776942776320", "432346601550250024", "218123360662454273", "382199522614312960", "445250406994411522", "414176702156242965", "253279235894935552", "355864890533216268", "422902694982844417", "449417918485233710", "458445698287796225", "272405335170351104", "279154101491728386", "208175587200598016", "306653825924726784", "398921783119708160", "314567709910368257", "425505213068214272", "355859814485590036", "235073818547191808", "400511704800165888", "457375696877256734", "386433703825637377", "252008404216709120", "428975369702604821", "414328458122887168", "301085633789558784", "142064460608176128", "151643764446724096", "392458194707939349", "354794281132752906", "438544949915549696", "444810929008279552", "167076306905858049", "425059508864417802", "440888022058139660", "358843859591233546", "434615032748310548", "353479355344617477", "223497327372009472", "288797329581015042", "282430513514545163", "427695717218517003", "442691916065144863", "360603656091074560", "274417074846171136", "173542721212907522", "319624152312971284", "412334080676462592", "435401908988018689", "379127899363606535", "303029793132118017", "185083441585455105", "366457981442719776", "119215300351754240", "236588635921711104", "376447276664487956", "399683238580453377", "420720781836681217", "440387171233300482", "424970446438531072", "270789900096372736", "414273616121823247", "433343495873232897", "219617338255736832", "440305219377692702", "279481924228087808", "360746699053989888", "420342599811989514", "198520682139615244", "426414451269435403", "249050707997491200", "341004598410084354", "424685510884065280", "285123259047870465", "392917154611200001", "441372757150924800", "386306369390641154", "410886108306735105", "250835742719344642", "129394315775574016", "418864410031816737", "274976375386013699", "307326516788723713", "380602584508923905", "245025389976616960", "279847737158270976", "264643893801254913", "435837844678901763", "329841927686062083", "321049495376756737", "428392039382646785", "310880604663185411", "380114326562013187", "429790669389824030", "448399978235166720", "380454073591136276", "446861560095440896", "111941568583237632", "385642455837704192", "440342580929101824", "381435061888745475", "440692297441607680", "205413567539707904", "377999661220495370", "398580479642697739", "404624474194051073", "384888231575158784", "319886498252062721", "421112933804670987", "193929517083918336", "235229206403874818", "404851080116043789", "398214730302488577", "338375275844730880", "420422537705553922", "440700090689257485", "152905596637675521", "432999970233384963", "384809499715829771", "176492265890512896", "392884811892523009", "236763807697993738", "364983632105963521", "435117738080337920", "175804433790140417", "443753710032519171", "440709178437402624", "420413277085106187", "429362530654224394", "317519305593978891", "326262217534210049", "444907654926827521", "393625387923669002", "290995628014698509", "414641368170889218", "390353153687814155", "375759126523019266", "443057539823828993", "394683659581390862", "429882056143667222", "322539545629556739", "264678113735081994", "388853288470315020", "239910380590071808", "428315177427927041", "440378638337310721", "433073721394331649", "367103413517025321", "439858592145866806", "374952599662624770", "433343112216182795", "416737348978475019", "418537764116627464", "448038589490528256", "327283026943803393", "431822128682369025", "434445221699256320", "434023293637492736", "227960408361795584", "197652124912451585", "407879905527988234", "312172518373064704", "398658717320740865", "177664349513580544", "440026185976643584", "371158269672161282", "397952930994716682", "415339944450719745", "286272584432222209", "223983347766919168", "175718926842331136", "396110397905567744", "456279930150322201", "420736024667226123", "266207213197066240", "434362586696384513", "132615627977261056", "250812979321241600", "409411726899937280", "295613760104562695", "448922538635034624", "324686963674447873", "379689121305853953", "187898792857567232", "362809927921827840", "319614075862515715", "211943180034244608", "454875296647086082", "309386431887835138", "345337742688911382", "399652984423841792", "438827381180989441", "452052115343409153"], "wordlist": None, "case_sensitive_wordlist": None}

# try:
# 	filehandle = open(filename)
# 	filedata = json.load(filehandle)
# except Exception:
# 	pass
# else:
if filedata["setup_info"]["copy_server_ids"] != None:
	copy_server_ids = filedata["setup_info"]["copy_server_ids"]
if filedata["setup_info"]["copy_channel_ids"] != None:
	copy_channel_ids = filedata["setup_info"]["copy_channel_ids"]
if filedata["setup_info"]["post_server_ids"] != None:
	post_server_ids = filedata["setup_info"]["post_server_ids"]
if filedata["setup_info"]["post_channel_ids"] != None:
	post_channel_ids = filedata["setup_info"]["post_channel_ids"]
if filedata["memberlist"] != None:
	memberlist = filedata["memberlist"]
if filedata["wordlist"] != None:
	wordlist = filedata["wordlist"]
if filedata["case_sensitive_wordlist"] != None:
	case_sensitive_wordlist = filedata["case_sensitive_wordlist"]
# filehandle.close()

commands_server_id_exists = False
commands_channel_id_exists = False

adding_copy_server = False
adding_copy_channel = False
adding_post_server = False
adding_post_channel = False

removing_copy_server = False
removing_copy_channel = False
removing_post_server = False
removing_post_channel = False

async def edit_check():

	global edit_msg_list

	await bot.wait_until_ready()
	while not bot.is_closed:
		await asyncio.sleep(0.1)
		for edit_msg in edit_msg_list:
			if edit_msg["copy_message_object"].content != edit_msg["message_content"]:
				try:
					await bot.edit_message(edit_msg["post_message_object"], new_content=text_message_filter(edit_msg["copy_message_object"].content))
					edit_msg_list[edit_msg_list.index(edit_msg)]["message_content"] = edit_msg["copy_message_object"].content
				except Exception:
					pass



def text_message_filter(original_message):

	global case_sensitive_wordlist
	global wordlist

	local_new_message = original_message
	if case_sensitive_wordlist:
		for word in wordlist:
			local_new_message = local_new_message.replace(word, "")
	else:
		lowercase_message = local_new_message.lower()
		new_letters = list(local_new_message)
		letter_index = 0
		uppercase_letter_indexes = []
		for letter in new_letters:
			if letter.isupper():
				uppercase_letter_indexes.append(letter_index)
			letter_index += 1
		del letter_index
		for word in wordlist:
			replacement_word = len(word) * "�"
			lowercase_message = lowercase_message.replace(word.lower(), replacement_word)
		lowercase_letters = list(lowercase_message)
		for letter_index in uppercase_letter_indexes:
			lowercase_letters[letter_index] = lowercase_letters[letter_index].upper()
		local_new_message = "".join(lowercase_letters)
		local_new_message = local_new_message.replace("�", "")
	return local_new_message

@bot.event
async def on_ready():
	await bot.wait_until_ready()

	global commands_server_id
	global commands_channel_id
	global commands_server_id_exists
	global commands_channel_id_exists

	commands_server_id = commands_server_id.strip()
	commands_channel_id = commands_channel_id.strip()

	if (len(commands_server_id) != 0):
			try:
				commands_server_object = bot.get_server(commands_server_id)
				print("Commands Server: {0} ({1})".format(commands_server_object.name, commands_server_object.id))
			except Exception:
				print("Exiting: Invalid commands_server_id ({0})".format(commands_server_id))
				time.sleep(5)
				raise SystemExit
			commands_server_id_exists = True
			if (len(commands_channel_id) != 0):
				try:
					commands_channel_object = bot.get_server(commands_server_id).get_channel(commands_channel_id)
					print("Commands Channel: {0} ({1})".format(commands_channel_object.name, commands_channel_object.id))
				except Exception:
					print("Exiting: Invalid commands_channel_id ({0})".format(commands_channel_id))
					time.sleep(5)
					raise SystemExit
				commands_channel_id_exists = True

	print (bot.user.name + " is ready")
	print ("ID: " + bot.user.id)

@bot.event
async def on_message(message):

	t0 = time.time()

	message_channel = message.channel

	global embed
	global edit_msg_list
	global edit_msg_list_length

	global copy_server_ids
	global copy_channel_ids
	global post_server_ids
	global post_channel_ids

	global commands_server_id
	global commands_channel_id
	global commands_server_id_exists
	global commands_channel_id_exists

	global adding_copy_server
	global adding_copy_channel
	global adding_post_server
	global adding_post_channel

	global removing_copy_server
	global removing_copy_channel
	global removing_post_server
	global removing_post_channel

	global memberlist
	global wordlist
	global case_sensitive_wordlist

	if message.author.id != bot.user.id:
		if ((not commands_server_id_exists) or (message.server.id == commands_server_id)) and ((not commands_channel_id_exists) or (message.channel.id == commands_channel_id)):

			# If block for all the commands.

			if (not adding_copy_server) and (not adding_copy_channel) and (not adding_post_server) and (not adding_post_channel) and (not removing_copy_server) and (not removing_copy_channel) and (not removing_post_server) and (not removing_post_channel):



				####################################################################################################
				####################################################################################################



				if (message.content[:12] == "!memberlist ") or (message.content == "!memberlist"):
					if (copy_server_ids != []) and (copy_channel_ids != []):

						#!MEMBERLIST ADD

						if (message.content[:16] == "!memberlist add ") or (message.content == "!memberlist add"):
							if (message.content[:20] == "!memberlist add all ") or (message.content == "!memberlist add all"):
								count = 0
								for copy_server_id in copy_server_ids:
									for member in bot.get_server(copy_server_id).members:
										if not (member.id in memberlist):
											memberlist.append(member.id)
											count += 1
								filedata["memberlist"] = memberlist		#SAVE TO FILE
								filehandle = open(filename, "w")
								json.dump(filedata, filehandle)
								filehandle.close()
								if count == 1:
									await bot.send_message(message_channel, """**[1] member was added to the memberlist.**""")
								else:
									await bot.send_message(message_channel, """**[{0}] members were added to the memberlist.**""".format(str(count)))
								del count
							else:
								temp_bool = True
								for copy_server_id in copy_server_ids:
									for member in bot.get_server(copy_server_id).members:
										if (message.content[16:] == member.name) or (message.content[16:] == member.id):
											if member.id in memberlist:
												await bot.send_message(message_channel, """**The member *{0} ({1})* is already in the memberlist.**
**Use the command *!memberlist* to see all the members who have their messages currently being copied.**
""".format(member.name, member.id))
											else:
												memberlist.append(member.id)
												filedata["memberlist"] = memberlist		#SAVE TO FILE
												filehandle = open(filename, "w")
												json.dump(filedata, filehandle)
												filehandle.close()
												await bot.send_message(message_channel, """**The member *{0} ({1})* has been added to the memberlist.**
""".format(member.name, member.id))
											temp_bool = False
											break
									if (not temp_bool):
										break
								if temp_bool:
									if message.content.strip()[:16] == "!memberlist add ":
										await bot.send_message(message_channel, """**Invalid member - does not exist**""")
									await bot.send_message(message_channel, """**Here are all the members in the copy servers.**
**Use the command *!memberlist add member* to add a member to the memberlist.**""")
									for copy_server_id in copy_server_ids:
										copy_server_object = bot.get_server(copy_server_id)
										await bot.send_message(message_channel, """**{0} ({1})**""".format(copy_server_object.name, copy_server_object.id))
										for member in copy_server_object.members:
											await bot.send_message(message_channel, """• {0} ({1})""".format(member.name, member.id))
								del temp_bool

						#!MEMBERLIST REMOVE

						elif (message.content[:19] == "!memberlist remove ") or (message.content == "!memberlist remove"):
							if len(memberlist) > 0:
								if (message.content[:23] == "!memberlist remove all ") or (message.content == "!memberlist remove all"):
									count = len(memberlist)
									memberlist = []
									filedata["memberlist"] = memberlist		#SAVE TO FILE
									filehandle = open(filename, "w")
									json.dump(filedata, filehandle)
									filehandle.close()
									if count == 1:
										await bot.send_message(message_channel, """**[1] member was removed from the memberlist.**""")
									else:
										await bot.send_message(message_channel, """**[{0}] members were removed from the memberlist.**""".format(str(count)))
									del count
								else:
									temp_bool = True
									for member_id in memberlist:
										for copy_server_id in copy_server_ids:
											try:
												member_object = bot.get_server(copy_server_id).get_member(member_id)
											except Exception:
												pass
											else:
												if (message.content[19:] == member_object.name) or (message.content[19:] == member_object.id):
													memberlist.remove(member_object.id)
													filedata["memberlist"] = memberlist		#SAVE TO FILE
													filehandle = open(filename, "w")
													json.dump(filedata, filehandle)
													filehandle.close()
													await bot.send_message(message_channel, """**The member *{0} ({1})* has been removed from the memberlist.**
""".format(member_object.name, member_object.id))
													temp_bool = False
													break
									if temp_bool:
										if message.content.strip()[:19] == "!memberlist remove ":
											await bot.send_message(message_channel, """**Invalid member - not in memberlist**""")
										await bot.send_message(message_channel, """**Here are all the members in the memberlist (the members who have their messages currently being copied).**
**Use the command *!memberlist remove member* to remove a member from the memberlist**""")
										for member_id in memberlist:
											for copy_server_id in copy_server_ids:
												try:
													member_object = bot.get_server(copy_server_id).get_member(member_id)
													await bot.send_message(message_channel, """• {0} ({1})""".format(member_object.name, member_object.id))
												except Exception:
													pass
									del temp_bool
							else:
								await bot.send_message(message_channel, """**There are currently no members in the memberlist.**
**For more commands on the memberlist, use the command *!help*.**""")

						#!MEMBERLIST

						else:
							if len(memberlist) > 0:
								await bot.send_message(message_channel, """**[MEMBERLIST]**

**These members are currently having their messages copied when they send a message in the copy channels in the copy servers.**
**For more commands on the memberlist, use the command *!help*.**""")
								for member_id in memberlist:
									for copy_server_id in copy_server_ids:
										try:
											member_object = bot.get_server(copy_server_id).get_member(member_id)
											await bot.send_message(message_channel, """• {0} ({1})""".format(member_object.name, member_object.id))
										except Exception:
											pass
							else:
								await bot.send_message(message_channel, """**There are no members currently in the memberlist.**
**For more commands on the memberlist, use the command *!help*.**""")



					else:
						await bot.send_message(message_channel, """**The server to copy from and the channel to copy from must be set up before the *!memberlist* command can be used.**""")



				####################################################################################################
				####################################################################################################



				elif (message.content[:10] == "!wordlist ") or (message.content == "!wordlist"):
					if (copy_server_ids != []) and (copy_channel_ids != []):

						#!WORDLIST ADD

						if (message.content[:14] == "!wordlist add ") or (message.content == "!wordlist add"):
							if (message.content.strip()[:14] == "!wordlist add "):
								if (message.content[14:] in wordlist) or ((not case_sensitive_wordlist) and (message.content[14:].lower() in wordlist)):
									if case_sensitive_wordlist:
										await bot.send_message(message_channel, """**The word *{0}* is already in the wordlist.**
**Use the command *!wordlist* to see all the words that are currently being removed from the copied messages.**""".format(message.content[14:]))
									else:
										await bot.send_message(message_channel, """**The word *{0}* is already in the wordlist.**
**Use the command *!wordlist* to see all the words that are currently being removed from the copied messages.**""".format(message.content[14:].lower()))
								else:
									if case_sensitive_wordlist:
										wordlist.append(message.content[14:])
										filedata["wordlist"] = wordlist		#SAVE TO FILE
										filehandle = open(filename, "w")
										json.dump(filedata, filehandle)
										filehandle.close()
										await bot.send_message(message_channel, """**The word *{0}* has been added to the wordlist.**""".format(message.content[14:]))
									else:
										wordlist.append(message.content[14:].lower())
										filedata["wordlist"] = wordlist		#SAVE TO FILE
										filehandle = open(filename, "w")
										json.dump(filedata, filehandle)
										filehandle.close()
										await bot.send_message(message_channel, """**The word *{0}* has been added to the wordlist.**""".format(message.content[14:].lower()))
							else:
								await bot.send_message(message_channel, """**Use the command *!wordlist add word* to add a member to the wordlist.**""")

						#!WORDLIST REMOVE

						elif (message.content[:17] == "!wordlist remove ") or (message.content == "!wordlist remove"):
							if len(wordlist) > 0:
								if (message.content[:21] == "!wordlist remove all ") or (message.content == "!wordlist remove all"):
									count = len(wordlist)
									wordlist = []
									filedata["wordlist"] = wordlist		#SAVE TO FILE
									filehandle = open(filename, "w")
									json.dump(filedata, filehandle)
									filehandle.close()
									if count == 1:
										await bot.send_message(message_channel, """**[1] word was removed from the wordlist.**""")
									else:
										await bot.send_message(message_channel, """**[{0}] words were removed from the wordlist.**""".format(str(count)))
									del count
								else:
									if (message.content[17:] in wordlist) or ((not case_sensitive_wordlist) and (message.content[17:].lower() in wordlist)):
										if case_sensitive_wordlist:
											wordlist.remove(message.content[17:])
											filedata["wordlist"] = wordlist		#SAVE TO FILE
											filehandle = open(filename, "w")
											json.dump(filedata, filehandle)
											filehandle.close()
											await bot.send_message(message_channel, """**The word *{0}* has been removed from the wordlist.**""".format(message.content[17:]))
										else:
											wordlist.remove(message.content[17:].lower())
											filedata["wordlist"] = wordlist		#SAVE TO FILE
											filehandle = open(filename, "w")
											json.dump(filedata, filehandle)
											filehandle.close()
											await bot.send_message(message_channel, """**The word *{0}* has been removed from the wordlist.**""".format(message.content[17:].lower()))
									else:
										if (message.content.strip()[:17] == "!wordlist remove "):
											await bot.send_message(message_channel, """**Invalid word - not in wordlist**""")
										await bot.send_message(message_channel, """**Here are all the words in the wordlist (the words that are currently being removed from the copied messages).**
**Use the command *!wordlist remove word* to remove a word from the wordlist**""")
										for word in wordlist:
											await bot.send_message(message_channel, """• {0}""".format(word))
							else:
								await bot.send_message(message_channel, """**There are currently no words in the wordlist.**
**For more commands on the wordlist, use the command *!help*.**""")

						#!WORDLIST TOGGLE CASE

						elif (message.content[:22] == "!wordlist toggle case ") or (message.content == "!wordlist toggle case"):
							if case_sensitive_wordlist:
								if len(wordlist) > 0:
									wordlist = list(word.lower() for word in wordlist)
									for word in wordlist:
										if wordlist.count(word) > 1:
											for x in range(wordlist.count(word) - 1):
												wordlist.remove(word)
								case_sensitive_wordlist = False
								filedata["wordlist"] = wordlist		#SAVE TO FILE
								filedata["case_sensitive_wordlist"] = case_sensitive_wordlist
								filehandle = open(filename, "w")
								json.dump(filedata, filehandle)
								filehandle.close()
								await bot.send_message(message_channel, """The wordlist is now case **insensitive**.""")
							else:
								case_sensitive_wordlist = True
								filedata["case_sensitive_wordlist"] = case_sensitive_wordlist		#SAVE TO FILE
								filehandle = open(filename, "w")
								json.dump(filedata, filehandle)
								filehandle.close()
								await bot.send_message(message_channel, """The wordlist is now case **sensitive**.""")

						#!WORDLIST

						elif (message.content[:10] == "!wordlist ") or (message.content == "!wordlist"):
							if len(wordlist) > 0:
								await bot.send_message(message_channel, """**[WORDLIST]**

**These words are currently being removed from the copied messages.**
**For more commands on the wordlist, use the command *!help*.**""")
								for word in wordlist:
									await bot.send_message(message_channel, """• {0} """.format(word))
							else:
								await bot.send_message(message_channel, """**There are no words currently in the wordlist.**
**For more commands on the wordlist, use the command *!help*.**""")



					else:
						await bot.send_message(message_channel, """**The server to copy from and the channel to copy from must be set up before the *!wordlist* command can be used.**""")



				####################################################################################################
				####################################################################################################



				elif (message.content[:5] == "!add ") or (message.content == "!add"):
					if (message.content[:17] == "!add copy server ") or (message.content == "!add copy server"):
						temp_bool = False
						for server_object in bot.servers:
							if not (server_object.id in copy_server_ids):
								temp_bool = True
						if temp_bool:
							for server_object in bot.servers:
								if not (server_object.id in copy_server_ids):
									temp_bool
							await bot.send_message(message_channel, """**[ADDING COPY SERVER]**

**Type one of these servers to add them to the copy server list.**""")
							for server_object in bot.servers:
								if not (server_object.id in copy_server_ids):
									await bot.send_message(message_channel, """• {0} ({1})""".format(server_object.name, server_object.id))
							adding_copy_server = True
						else:
							await bot.send_message(message_channel, """**All the servers I'm in are already in the copy server list.**""")


					elif (message.content[:18] == "!add copy channel ") or (message.content == "!add copy channel"):
						temp_bool = False
						for copy_server_id in copy_server_ids:
							server_object = bot.get_server(copy_server_id)
							for channel_object in server_object.channels:
								if (not (channel_object.id in copy_channel_ids)) and (str(channel_object.type) == "text"):
									temp_bool = True
						if temp_bool:
							await bot.send_message(message_channel, """**[ADDING COPY CHANNEL]**

**Type one of these channels to add them to the copy channel list.**""")
							for server_object in bot.servers:
								if server_object.id in copy_server_ids:
									await bot.send_message(message_channel, """**{0} ({1})**""".format(server_object.name, server_object.id))
									for channel_object in server_object.channels:
										if (not (channel_object.id in copy_channel_ids)) and (str(channel_object.type) == "text"):
											await bot.send_message(message_channel, """• {0} ({1})""".format(channel_object.name, channel_object.id))
							adding_copy_channel = True
						else:
							await bot.send_message(message_channel, """**All the channels I'm in are already in the copy channel list.**""")


					elif (message.content[:17] == "!add post server ") or (message.content == "!add post server"):
						temp_bool = False
						for server_object in bot.servers:
							if not (server_object.id in post_server_ids):
								temp_bool = True
						if temp_bool:
							await bot.send_message(message_channel, """**[ADDING POST SERVER]**

**Type one of these servers to add them to the post server list.**""")
							for server_object in bot.servers:
								if not (server_object.id in post_server_ids):
									await bot.send_message(message_channel, """• {0} ({1})""".format(server_object.name, server_object.id))
							adding_post_server = True
						else:
							await bot.send_message(message_channel, """**All the servers I'm in are already in the post server list.**""")


					elif (message.content[:18] == "!add post channel ") or (message.content == "!add post channel"):
						temp_bool = False
						for post_server_id in post_server_ids:
							server_object = bot.get_server(post_server_id)
							for channel_object in server_object.channels:
								if (not (channel_object.id in post_channel_ids)) and (str(channel_object.type) == "text"):
									temp_bool = True
						if temp_bool:
							await bot.send_message(message_channel, """**[ADDING POST CHANNEL]**

**Type one of these channels to add them to the post channel list.**""")
							for server_object in bot.servers:
								if server_object.id in post_server_ids:
									await bot.send_message(message_channel, """**{0} ({1})**""".format(server_object.name, server_object.id))
									for channel_object in server_object.channels:
										if (not (channel_object.id in post_channel_ids)) and (str(channel_object.type) == "text"):
											await bot.send_message(message_channel, """• {0} ({1})""".format(channel_object.name, channel_object.id))
							adding_post_channel = True
						else:
							await bot.send_message(message_channel, """**All the channels I'm in are already in the post channel list.**""")


					else:
						await bot.send_message(message_channel, """**Use *!add* like this:**

• *!add copy server* : Adds a server to copy from.
• *!add copy channel* : Adds a channel (in the copy servers) to copy from.
• *!add post server* : Adds a server to post to.
• *!add post channel* : Adds a channel (in the post servers) to post to.
""")



				####################################################################################################
				####################################################################################################



				elif (message.content[:8] == "!remove ") or (message.content == "!remove"):
					if (message.content[:20] == "!remove copy server ") or (message.content == "!remove copy server"):
						if len(copy_server_ids) > 0:
							await bot.send_message(message_channel, """**[REMOVING COPY SERVER]**

**Type one of these servers to remove them from the copy server list.**""")
							for copy_server_id in copy_server_ids:
								server_object = bot.get_server(copy_server_id)
								await bot.send_message(message_channel, """• {0} ({1})""".format(server_object.name, server_object.id))
							removing_copy_server = True
						else:
							await bot.send_message(message_channel, """**There are currently no copy servers.**""")



					elif (message.content[:21] == "!remove copy channel ") or (message.content == "!remove copy channel"):
						if len(copy_channel_ids) > 0:
							await bot.send_message(message_channel, """**[REMOVING COPY CHANNEL]**

**Type one of these channels to remove them from the copy channel list.**""")
							for copy_server_id in copy_server_ids:
								server_object = bot.get_server(copy_server_id)
								temp_bool = False
								for channel_object in server_object.channels:
									if channel_object.id in copy_channel_ids:
										temp_bool = True
								if temp_bool:
									await bot.send_message(message_channel, """**{0} ({1})**""".format(server_object.name, server_object.id))
								for channel_object in server_object.channels:
									if channel_object.id in copy_channel_ids:
										await bot.send_message(message_channel, """• {0} ({1})""".format(channel_object.name, channel_object.id))
							removing_copy_channel = True
						else:
							await bot.send_message(message_channel, """**There are currently no copy channels.**""")



					elif (message.content[:20] == "!remove post server ") or (message.content == "!remove post server"):
						if len(post_server_ids) > 0:
							await bot.send_message(message_channel, """**[REMOVING POST SERVER]**

**Type one of these servers to remove them from the post server list.**""")
							for post_server_id in post_server_ids:
								server_object = bot.get_server(post_server_id)
								await bot.send_message(message_channel, """• {0} ({1})""".format(server_object.name, server_object.id))
							removing_post_server = True
						else:
							await bot.send_message(message_channel, """**There are currently no post servers.**""")



					elif (message.content[:21] == "!remove post channel ") or (message.content == "!remove post channel"):
							if len(post_channel_ids) > 0:
								await bot.send_message(message_channel, """**[REMOVING POST CHANNEL]**

**Type one of these channels to remove them from the post channel list.**""")
								for post_server_id in post_server_ids:
									server_object = bot.get_server(post_server_id)
									temp_bool = False
									for channel_object in server_object.channels:
										if channel_object.id in post_channel_ids:
											temp_bool = True
									if temp_bool:
										await bot.send_message(message_channel, """**{0} ({1})**""".format(server_object.name, server_object.id))
									for channel_object in server_object.channels:
										if channel_object.id in post_channel_ids:
											await bot.send_message(message_channel, """• {0} ({1})""".format(channel_object.name, channel_object.id))
								removing_post_channel = True
							else:
								await bot.send_message(message_channel, """**There are currently no post channels.**""")



					else:
						await bot.send_message(message_channel, """**Use *!remove* like this:**

• *!remove copy server* : Removes a copy server.
• *!remove copy channel* : Removes a copy channel.
• *!remove post server* : Removes a post server.
• *!remove post channel* : Removes a post channel.
""")


				####################################################################################################
				####################################################################################################

				elif (message.content[:6] == "!help ") or (message.content == "!help"):
					await bot.send_message(message_channel, """**[COMMANDS]**

• *!memberlist* : Shows you all the members currently in the memberlist.
• *!memberlist add member* : Adds a member from the copy server to the memberlist.
• *!memberlist add all* : Adds all the members from the copy server to the memberlist.
• *!memberlist remove member* : Removes a member from the memberlist.
• *!memberlist remove all* : Removes all the members from the memberlist.

• *!wordlist* : Shows all the words currently in the wordlist.
• *!wordlist add word* : Adds a word to the wordlist.
• *!wordlist remove word* : Removes a word from the wordlist .
• *!wordlist remove all* : Removes all the words from the wordlist.
• *!wordlist toggle case* : Toggles between case insensitive and case sensitive.

• *!add* : Shows the commands for adding copy/post servers/channels.
• *!remove* : Shows the commands for removing copy/post servers/channels.
""")


				####################################################################################################
				####################################################################################################



			elif adding_copy_server:
				temp_bool = True
				for server_object in bot.servers:
					if (message.content == server_object.name) or (message.content == server_object.id):
						if server_object.id in copy_server_ids:
							await bot.send_message(message_channel, """**Invalid server - already a copy server.**""")
						else:
							copy_server_ids.append(server_object.id)
							filedata["setup_info"]["copy_server_ids"] = copy_server_ids		#SAVE TO FILE
							filehandle = open(filename, "w")
							json.dump(filedata, filehandle)
							filehandle.close()
							await bot.send_message(message_channel, """**The copy server *{0} ({1})* has been added.**""".format(server_object.name, server_object.id))
							adding_copy_server = False
						temp_bool = False
						break
				if adding_copy_server and temp_bool:
					await bot.send_message(message_channel, """**Invalid server - does not exist.**""")



			elif adding_copy_channel:
				temp_bool = True
				for server_id in copy_server_ids:
					for channel_object in bot.get_server(server_id).channels:
						if (message.content == channel_object.name) or (message.content == channel_object.id):
							if channel_object.id in copy_channel_ids:
								await bot.send_message(message_channel, """**Invalid channel - already a copy channel.**""")
							else:
								copy_channel_ids.append(channel_object.id)
								filedata["setup_info"]["copy_channel_ids"] = copy_channel_ids		#SAVE TO FILE
								filehandle = open(filename, "w")
								json.dump(filedata, filehandle)
								filehandle.close()
								await bot.send_message(message_channel, """**The copy channel *{0} ({1})* has been added.**""".format(channel_object.name, channel_object.id))
								adding_copy_channel = False
							temp_bool = False
							break
				if adding_copy_channel and temp_bool:
					await bot.send_message(message_channel, """**Invalid channel - does not exist.**""")



			elif adding_post_server:
				temp_bool = True
				for server_object in bot.servers:
					if (message.content == server_object.name) or (message.content == server_object.id):
						if server_object.id in post_server_ids:
							await bot.send_message(message_channel, """**Invalid server - already a post server.**""")
						else:
							post_server_ids.append(server_object.id)
							filedata["setup_info"]["post_server_ids"] = post_server_ids		#SAVE TO FILE
							filehandle = open(filename, "w")
							json.dump(filedata, filehandle)
							filehandle.close()
							await bot.send_message(message_channel, """**The post server *{0} ({1})* has been added.**""".format(server_object.name, server_object.id))
							adding_post_server = False
						temp_bool = False
						break
				if adding_post_server and temp_bool:
					await bot.send_message(message_channel, """**Invalid server - does not exist.**""")



			elif adding_post_channel:
				temp_bool = True
				for server_id in post_server_ids:
					for channel_object in bot.get_server(server_id).channels:
						if (message.content == channel_object.name) or (message.content == channel_object.id):
							if channel_object.id in post_channel_ids:
								await bot.send_message(message_channel, """**Invalid channel - already a post channel.**""")
							else:
								post_channel_ids.append(channel_object.id)
								filedata["setup_info"]["post_channel_ids"] = post_channel_ids		#SAVE TO FILE
								filehandle = open(filename, "w")
								json.dump(filedata, filehandle)
								filehandle.close()
								await bot.send_message(message_channel, """**The post channel *{0} ({1})* has been added.**""".format(channel_object.name, channel_object.id))
								adding_post_channel = False
							temp_bool = False
							break
				if adding_post_channel and temp_bool:
					await bot.send_message(message_channel, """**Invalid channel - does not exist.**""")






			elif removing_copy_server:
				for server_object in bot.servers:
					if (message.content == server_object.name) or (message.content == server_object.id):
						if server_object.id in copy_server_ids:
							copy_server_ids.remove(server_object.id)
							filedata["setup_info"]["copy_server_ids"] = copy_server_ids		#SAVE TO FILE
							filehandle = open(filename, "w")
							json.dump(filedata, filehandle)
							filehandle.close()
							await bot.send_message(message_channel, """**The copy server *{0} ({1})* has been removed.**""".format(server_object.name, server_object.id))
							removing_copy_server = False
				if removing_copy_server:
					await bot.send_message(message_channel, """**Invalid server - not a copy server.**""")



			elif removing_copy_channel:
				for server_object in bot.servers:
					for channel_object in server_object.channels:
						if (message.content == channel_object.name) or (message.content == channel_object.id):
							if channel_object.id in copy_channel_ids:
								copy_channel_ids.remove(channel_object.id)
								filedata["setup_info"]["copy_channel_ids"] = copy_channel_ids		#SAVE TO FILE
								filehandle = open(filename, "w")
								json.dump(filedata, filehandle)
								filehandle.close()
								await bot.send_message(message_channel, """**The copy channel *{0} ({1})* has been removed.**""".format(channel_object.name, channel_object.id))
								removing_copy_channel = False
				if removing_copy_channel:
					await bot.send_message(message_channel, """**Invalid channel - not a copy channel.**""")



			elif removing_post_server:
				for server_object in bot.servers:
					if (message.content == server_object.name) or (message.content == server_object.id):
						if server_object.id in post_server_ids:
							post_server_ids.remove(server_object.id)
							filedata["setup_info"]["post_server_ids"] = post_server_ids		#SAVE TO FILE
							filehandle = open(filename, "w")
							json.dump(filedata, filehandle)
							filehandle.close()
							await bot.send_message(message_channel, """**The post server *{0} ({1})* has been removed.**""".format(server_object.name, server_object.id))
							removing_post_server = False
				if removing_post_server:
					await bot.send_message(message_channel, """**Invalid server - not a post server.**""")



			elif removing_post_channel:
				for server_object in bot.servers:
					for channel_object in server_object.channels:
						if (message.content == channel_object.name) or (message.content == channel_object.id):
							if channel_object.id in post_channel_ids:
								post_channel_ids.remove(channel_object.id)
								filedata["setup_info"]["post_channel_ids"] = post_channel_ids		#SAVE TO FILE
								filehandle = open(filename, "w")
								json.dump(filedata, filehandle)
								filehandle.close()
								await bot.send_message(message_channel, """**The post channel *{0} ({1})* has been removed.**""".format(channel_object.name, channel_object.id))
								removing_post_channel = False
				if removing_post_channel:
					await bot.send_message(message_channel, """**Invalid channel - not a post channel.**""")

		# Checks if the message being sent is in the copy server and in the copy channel,
		# and if it is, then it posts that same message to the post server.

		if message.server.id in copy_server_ids:
			if message.channel.id in copy_channel_ids:
				if (message.author.id in memberlist) or (not(message.author in message.server.members)):
					if (message.content).strip() != "":
						for post_server_id in post_server_ids:
							for post_channel_id in post_channel_ids:
								server_object = bot.get_server(post_server_id)
								channel_object = server_object.get_channel(post_channel_id)
								if channel_object in server_object.channels:
									if len(edit_msg_list) > 0:
										for x in range(len(edit_msg_list)):
											if (x == 0) and (len(edit_msg_list) != edit_msg_list_length):
												edit_msg_list.append(edit_msg_list[len(edit_msg_list) - 1])
											else:
												edit_msg_list[len(edit_msg_list) - 1 - x] = edit_msg_list[len(edit_msg_list) - 2 - x]
										edit_msg_list[0] = {"copy_message_object" : message,
															"post_message_object" : None,
															"message_content" : message.content,
															"message_type" : "text"}
									else:
										edit_msg_list.append({"copy_message_object" : message,
															"post_message_object" : None,
															"message_content" : message.content,
															"message_type" : "text"})

									new_message = text_message_filter(message.content)
									edit_msg_list[0]["post_message_object"] = await bot.send_message(channel_object, new_message)

					if message.attachments != []:
						for attachment in message.attachments:
							for post_server_id in post_server_ids:
								for post_channel_id in post_channel_ids:
									server_object = bot.get_server(post_server_id)
									channel_object = server_object.get_channel(post_channel_id)
									if channel_object in server_object.channels:
										await bot.send_message(channel_object, attachment["url"])
					if message.embeds != []:

						for embed_info in message.embeds:
							if ("title" in embed_info) and ("url" in embed_info) and ("description" in embed_info) and ("color" in embed_info):
								embed=discord.Embed(title=embed_info["title"], url=embed_info["url"], description=embed_info["description"], color=embed_info["color"])
							elif ("title" in embed_info) and ("url" in embed_info) and ("description" in embed_info):
								embed=discord.Embed(title=embed_info["title"], url=embed_info["url"], description=embed_info["description"])
							elif ("title" in embed_info) and ("url" in embed_info) and ("color" in embed_info):
								embed=discord.Embed(title=embed_info["title"], url=embed_info["url"], color=embed_info["color"])
							elif ("title" in embed_info) and ("description" in embed_info) and ("color" in embed_info):
								embed=discord.Embed(title=embed_info["title"], description=embed_info["description"], color=embed_info["color"])
							elif ("url" in embed_info) and ("description" in embed_info) and ("color" in embed_info):
								embed=discord.Embed(url=embed_info["url"], description=embed_info["description"], color=embed_info["color"])
							elif ("title" in embed_info) and ("url" in embed_info):
								embed=discord.Embed(title=embed_info["title"], url=embed_info["url"])
							elif ("title" in embed_info) and ("description" in embed_info):
								embed=discord.Embed(title=embed_info["title"], description=embed_info["description"])
							elif ("title" in embed_info) and ("color" in embed_info):
								embed=discord.Embed(title=embed_info["title"], color=embed_info["color"])
							elif ("url" in embed_info) and ("description" in embed_info):
								embed=discord.Embed(url=embed_info["url"], description=embed_info["description"])
							elif ("url" in embed_info) and ("color" in embed_info):
								embed=discord.Embed(url=embed_info["url"], color=embed_info["color"])
							elif ("description" in embed_info) and ("color" in embed_info):
								embed=discord.Embed(description=embed_info["description"], color=embed_info["color"])
							elif ("title" in embed_info):
								embed=discord.Embed(title=embed_info["title"])
							elif ("url" in embed_info):
								embed=discord.Embed(url=embed_info["url"])
							elif ("description" in embed_info):
								embed=discord.Embed(description=embed_info["description"])
							elif ("color" in embed_info):
								embed=discord.Embed(color=embed_info["color"])
							else:
								embed=discord.Embed()


							if "thumbnail" in embed_info:
								embed.set_thumbnail(url=embed_info["thumbnail"]["url"])


							if "fields" in embed_info:
								for embed_field in embed_info["fields"]:
									embed.add_field(name=embed_field["name"], value=embed_field["value"], inline=embed_field["inline"])


							if "footer" in embed_info:
								embed.set_footer(text=embed_info["footer"]["text"])

							for post_server_id in post_server_ids:
								for post_channel_id in post_channel_ids:
									server_object = bot.get_server(post_server_id)
									channel_object = server_object.get_channel(post_channel_id)
									if channel_object in server_object.channels:
										try:
											await bot.send_message(channel_object, embed=embed)
										except Exception as e:
											print(e)
											print("EMBED: {0}".format(embed_info))


					print("Time taken: " + str(time.time() - t0))

bot.loop.create_task(edit_check())
bot.run(token, bot=(not selfbot))
